#! /usr/bin/env python3
import docker
import signal
import sys
from flask import Flask, render_template, jsonify, request
import time
import threading
import socket


template = """
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Spes Robotics</title>
    </head>
    <style>
        .control-button
        {
            background-color: #3498db;
            color: white;
            padding: 27px 65px;
            font-size: 30px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin: 10px;
            text-decoration: none;
        }
    </style>
    <body>
        <h1>Spes control panel &#129302;</h1>
        <button onclick="start()"
            class="control-button">Start</button>
        <button onclick="stopContainer()" class="control-button">Stop</button>
        <button id="viewStreamButton" class="control-button">View stream</button>
        <button id="rotateRobot" class="control-button">Rotate</button>
        <hr>
        <h2>Container Status:</h2>
        <div id="status"></div>

        <script>
            function runCuda() {
                fetch('/run_cuda')
                    .then(response => response.json())
                    .then(data => {
                        updateStatus(data);
                    })
                    .catch(error => {
                        updateStatusError(error);
                    });
            }

            function start() {
                fetch('/start')
                    .then(response => response.json())
                    .then(data => {
                        updateStatus(data);
                    })
                    .catch(error => {
                        updateStatusError(error);
                    });
            }

            function stopContainer() {
                fetch('/stop')
                    .then(response => response.json())
                    .then(data => {
                        updateStatus(data);
                    })
                    .catch(error => {
                        updateStatusError(error);
                    });
            }

            function updateStatus(data) {
                const statusElement = document.getElementById('status');
                if (statusElement) {
                    let containerStatusHTML = '';

                    for (const dockerName in data) {
                        if (data.hasOwnProperty(dockerName)) {
                            const dockerStatus = data[dockerName].status;
                            containerStatusHTML += `<p><b>${dockerName}:</b> ${dockerStatus}</p>`;
                        }
                    }

                    statusElement.innerHTML = containerStatusHTML;
                } else {
                    console.error("Element with ID 'status' not found.");
                }
            }


            function updateStatusError(error) {
                const statusElement = document.getElementById('status');
                if (statusElement) {
                    statusElement.innerHTML = `<p style="color: red;">Update error: ${error}</p>`;
                } else {
                    console.error("Element with ID 'status' not found.");
                }
            }

            function checkContainerStatus() {
                fetch("/container_status")
                    .then(response => response.json())
                    .then(data => {
                        updateStatus(data);
                    })
                    .catch(error => {
                        updateStatusError(error);
                    });
            }

            setInterval(checkContainerStatus, 500);

        document.getElementById('viewStreamButton').addEventListener('click', function() {
            const currentHostIp = window.location.hostname;
            const streamUrl = `http://${currentHostIp}:8080/`;
            window.open(streamUrl, '_blank');
        });

       document.getElementById('rotateRobot').addEventListener('click', function() {
        const currentHostIp = window.location.hostname;
        const rotateUrl = `http://${currentHostIp}:8081/rotate`;
        
            fetch(rotateUrl)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    console.log("Request accepted!");
                    // Dodajte kod za rukovanje odgovorom ako je potrebno
                })
                .catch(error => console.error("Error:", error));
        });
    </script>
    </body>
    </html>
"""


DOCKERS = {
    'cuda' : {
            'image': 'spes-object-tracker-image',
            'args': ["--source", "-1", "--gpus", "all", "--model", "/home/marija/SpesRobotics/spes_autonomy/cuda/yolov8n.pt"],
            'params': {
                "tty": True,
                "remove": True,
                "network_mode": "host",
                "privileged": True,
                "volumes": {f"/home/marija/SpesRobotics/spes_autonomy/cuda": {"bind": "/home"}},
                "name": 'spes-object-tracker'},
            'container_name': 'spes-object-tracker'},
    'spes' : {
            'image': 'spesbot-deploy-image',
            'args': ["ros2", "run", "spes_move", "move"],
            'params': {
                    "tty": True,
                    "remove": True,
                    "network_mode": "host",
                    "privileged": True,
                    "volumes": {f"/home/marija/SpesRobotics/spes_autonomy/docker": {"bind": "/home"}},
                    "name": 'spesbot-container'},
            'container_name': 'spesbot-container'}
}


def get_container_logs(client, container_name_or_id):
    try:
        container = client.containers.get(container_name_or_id)
        logs = container.logs().decode("utf-8")
        return logs
    except docker.errors.NotFound as e:
        return f"Container '{container_name_or_id}' not found."
    except docker.errors.APIError as e:
        return f"Failed to get logs for container '{container_name_or_id}': {e}"

def stop_container_by_name(client, container_name):
    try:
        container = client.containers.get(container_name)
        print("Wait to stop container...")
        container.stop()
        print("Wait to remove container...")
        container.remove()
        print(f"Container '{container_name}' stopped and removed.")
    except docker.errors.NotFound:
        print(f"Container '{container_name}' not found.")
    except docker.errors.APIError as e:
        print(f"Failed to stop the container '{container_name}': {e}")

def stop_containers():
    client = docker.from_env()
    for docker_name, docker_item in DOCKERS.items():
        container_name = docker_item['container_name']
        try:
                container = client.containers.get(docker_item['container_name'])
                container.stop()
                container.remove()
                print(f"Container '{container_name}' stopped and removed.")
        except docker.errors.NotFound:
            print(f"Container '{container_name}' not found.")
        except docker.errors.APIError as e:
            print(f"Failed to stop the container '{container_name}': {e}")

def get_container_status(container_name):
    try:
        client = docker.from_env()
        container = client.containers.get(container_name)
        # print(f"Container '{container_name}' status: {container.status}")
        return container.status
    except docker.errors.NotFound:
        return f"stopped"
    except docker.errors.APIError as e:
        print(f"Failed to get status for container '{container_name}': {e}")
        return f"Failed to get status for container '{container_name}': {e}"

def run_container(image, args, params, container_name):
    client = docker.from_env()
    container = None

    try:
        try:
            stop_container_by_name(client, container_name)
        except Exception as e:
            print(e)
        container = client.containers.run(
            image,
            args,
            detach=True,
            **params
        )
        print(f"{container_name} started successfully.")
        try:
            for log_message in container.logs(stream=True, follow=True):
                print(log_message.decode("utf-8"), end='')
        except Exception as e:
            print(e)

    except docker.errors.ContainerError as e:
        print("Container execution failed with an error:", e)
        print(e.stderr.decode("utf-8"))
    except docker.errors.ImageNotFound as e:
        print("Error: Docker image not found.")
        print(e)
    except KeyboardInterrupt:
        print("KeyboardInterrupt received. Stopping the container...")
        stop_container_by_name(client, container_name)
        print("Stopped!")
        sys.exit(0)
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
    finally:
        if container:
            try:
                print("Try to stop processes finaly!")
                exit_code = container.wait()
                print("Container Logs:")
                if exit_code == 0:
                    print("Container executed successfully.")
                else:
                    print(f"Container execution failed with exit code {exit_code}")
            except docker.errors.APIError as e:
                print(f"Failed to get container logs: {e}")
            stop_container_by_name(client, container_name)

def run_all_containers():
    threads = []
    for docker_name, docker_item in DOCKERS.items():
        image =  docker_item['image']
        args = docker_item['args']
        params  = docker_item['params']
        container_name = docker_item['container_name']
        print(image, args, params, container_name)
        thread = threading.Thread(target=run_container, args=(image, args, params, container_name))
        threads.append(thread)
    print(threads)
    for thread in threads:
        thread.start()

    for thread in threads:
        thread.join()

def signal_handler(sig, frame):
    print("Server stopped. Stopping containers...")
    stop_containers()
    print("Stopped containers.")
    sys.exit(0)

def get_host_ip():
    host_name = socket.gethostname()
    host_ip = socket.gethostbyname(host_name)
    return host_ip

signal.signal(signal.SIGINT, signal_handler)

app = Flask(__name__)

@app.route('/')
def index():
   return template

@app.route('/start', methods=['GET'])
def start():
    try:
        run_all_containers()
        return jsonify({'status': 'success', 'message': 'Both Docker containers started!'})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)})

@app.route('/stop', methods=['GET'])
def stop():
    try:
        stop_containers()
        return jsonify({'message': 'Stopped and removed containers!'})
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/container_status')
def container_status():
    try:
        client = docker.from_env()
        statuses = {}

        for docker_name, docker_item in DOCKERS.items():
            container_name = docker_item['container_name']
            status = get_container_status(container_name)
            statuses[docker_name] = {'status': status}
        return jsonify(statuses)
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": str(e)
        })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)


